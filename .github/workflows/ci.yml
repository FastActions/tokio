on:
  push:
    branches: ["master", "tokio-*.x"]
  pull_request:
    branches: ["master", "tokio-*.x"]

name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  rust_stable: stable
  rust_nightly: nightly-2023-10-21
  rust_clippy: '1.75'
  rust_min: '1.63'

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  tests-pass:
    name: all systems go
    runs-on: blacksmith-4vcpu-ubuntu-2204
    needs:
      - test-tokio-full
      - test-workspace-all-features
      - test-integration-tests-per-feature
      - test-parking_lot
      - test-tracing-instrumentation
      - valgrind
      - test-unstable
      - miri
      - asan
      - cross-check
      - cross-check-tier3
      - cross-test-with-parking_lot
      - cross-test-without-parking_lot
      - no-atomic-u64-test
      - no-atomic-u64-check
      - features
      - minrust
      - minimal-versions
      - fmt
      - clippy
      - docs
      - loom-compile
      - check-readme
      - test-hyper
      - x86_64-fortanix-unknown-sgx
      - check-redox
      - wasm32-unknown-unknown
      - wasm32-wasi
      - check-external-types
      - check-fuzzing
    steps:
      - run: exit 0

  basics:
    name: basic checks
    runs-on: blacksmith-4vcpu-ubuntu-2204
    needs:
      - clippy
      - fmt
      - docs
      - minrust
    steps:
      - run: exit 0

  test-tokio-full:
    needs: basics
    name: test tokio full
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - blacksmith-4vcpu-ubuntu-2204
          - macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: useblacksmith/cache@v5

      - name: test tokio full
        run: |
          set -euxo pipefail
          cargo nextest run --features full
          cargo test --doc --features full
        working-directory: tokio

  test-workspace-all-features:
    needs: basics
    name: test all crates in the workspace with all features
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - blacksmith-4vcpu-ubuntu-2204
          - macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: useblacksmith/cache@v5

      - name: test all --all-features
        run: |
          set -euxo pipefail
          cargo nextest run --workspace --all-features
          cargo test --doc --workspace --all-features

  test-workspace-all-features-panic-abort:
    needs: basics
    name: test all crates in the workspace with all features and panic=abort
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - blacksmith-4vcpu-ubuntu-2204
          - macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_nightly }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_nightly }}
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: useblacksmith/cache@v5

      - name: test all --all-features panic=abort
        run: |
          set -euxo pipefail
          RUSTFLAGS="$RUSTFLAGS -C panic=abort -Zpanic-abort-tests" cargo nextest run --workspace --exclude tokio-macros --exclude tests-build --all-features --tests
  
  test-integration-tests-per-feature:
    needs: basics
    name: Run integration tests for each feature
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - blacksmith-4vcpu-ubuntu-2204
          - macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}
      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack

      - uses: useblacksmith/cache@v5

      - name: test tests-integration --each-feature
        run: cargo hack test --each-feature
        working-directory: tests-integration

      - name: test tests-build --each-feature
        run: cargo hack test --each-feature
        working-directory: tests-build

      - name: Check benches
        run: cargo check --benches
        working-directory: benches
        if: startsWith(matrix.os, 'ubuntu')

  test-parking_lot:
    name: compile tests with parking lot send guards
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}

      - name: Enable parking_lot send_guard feature
        run: sed -i '/\[features\]/a plsend = ["parking_lot/send_guard"]' tokio/Cargo.toml

      - uses: useblacksmith/cache@v5
      - name: Check tests with all features enabled
        run: cargo check --workspace --all-features --tests

  test-tracing-instrumentation:
    needs: basics
    name: test tokio instrumentation
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_stable }}
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: useblacksmith/cache@v5

      - name: test tracing-instrumentation
        run: |
          set -euxo pipefail
          cargo nextest run
        working-directory: tokio/tests/tracing-instrumentation
        env:
          RUSTFLAGS: --cfg tokio_unstable -Dwarnings

  valgrind:
    name: valgrind
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}

      - name: Install Valgrind
        uses: taiki-e/install-action@valgrind

      - uses: useblacksmith/cache@v5
      - name: cargo build test-mem
        run: cargo build --features rt-net --bin test-mem
        working-directory: tests-integration

      - name: Run valgrind test-mem
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all --fair-sched=yes ./target/debug/test-mem

      - name: cargo build test-process-signal
        run: cargo build --features rt-process-signal --bin test-process-signal
        working-directory: tests-integration

      - name: Run valgrind test-process-signal
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all --fair-sched=yes ./target/debug/test-process-signal

  test-unstable:
    name: test tokio full --unstable
    needs: basics
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: blacksmith-4vcpu-ubuntu-2204
          - os: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: useblacksmith/cache@v5
      - name: test tokio full --cfg unstable
        run: |
          set -euxo pipefail
          cargo nextest run --all-features
          cargo test --doc --all-features
        working-directory: tokio
        env:
          RUSTFLAGS: --cfg tokio_unstable -Dwarnings
          RUSTDOCFLAGS: --cfg tokio_unstable

  test-unstable-taskdump:
    name: test tokio full --unstable --taskdump
    needs: basics
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: useblacksmith/cache@v5
      - name: test tokio full --cfg unstable --cfg taskdump
        run: |
          set -euxo pipefail
          cargo nextest run --all-features
          cargo test --doc --all-features
        working-directory: tokio
        env:
          RUSTFLAGS: --cfg tokio_unstable --cfg tokio_taskdump -Dwarnings
          RUSTDOCFLAGS: --cfg tokio_unstable --cfg tokio_taskdump

  check-unstable-mt-counters:
    name: check tokio full --internal-mt-counters
    needs: basics
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - uses: useblacksmith/cache@v5
      - name: check tokio full --cfg unstable --cfg internal-mt-counters
        run: |
          set -euxo pipefail
          cargo nextest run --all-features
          cargo test --doc --all-features
        working-directory: tokio
        env:
          RUSTFLAGS: --cfg tokio_unstable --cfg tokio_internal_mt_counters -Dwarnings
          RUSTDOCFLAGS: --cfg tokio_unstable --cfg tokio_internal_mt_counters

  miri:
    name: miri
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_nightly }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_nightly }}
          components: miri
      - uses: useblacksmith/cache@v5
      - name: miri
        run: |
          cargo miri test --features full --lib --no-fail-fast
        working-directory: tokio
        env:
          MIRIFLAGS: -Zmiri-disable-isolation -Zmiri-strict-provenance -Zmiri-retag-fields

  asan:
    name: asan
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Install llvm
        run: sudo apt-get install -y llvm
      - name: Install Rust ${{ env.rust_nightly }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_nightly }}

      - uses: useblacksmith/cache@v5
      - name: asan
        run: cargo test --workspace --all-features --target x86_64-unknown-linux-gnu --tests -- --test-threads 1 --nocapture
        env:
          RUSTFLAGS: -Z sanitizer=address --cfg tokio_no_tuning_tests
          TRYBUILD: overwrite

  semver:
    name: semver
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          rust-toolchain: ${{ env.rust_stable }}
          release-type: minor

  cross-check:
    name: cross-check
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    strategy:
      matrix:
        target:
          - powerpc-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - arm-linux-androideabi
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_stable }}
          target: ${{ matrix.target }}

      - uses: useblacksmith/cache@v5
      - run: cargo check --workspace --all-features --target ${{ matrix.target }}
        env:
          RUSTFLAGS: --cfg tokio_unstable -Dwarnings

  cross-check-tier3:
    name: cross-check-tier3
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    strategy:
      matrix:
        target:
          - name: armv7-sony-vita-newlibeabihf
            exclude_features: "process,signal,rt-process-signal,full"
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ env.rust_nightly }}
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.rust_nightly }}
          components: rust-src
      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
      - uses: useblacksmith/cache@v5
      - run: cargo hack check -Zbuild-std --workspace --each-feature --target ${{ matrix.target.name }} --exclude-features "${{ matrix.target.exclude_features }}"
        env:
          RUSTFLAGS: --cfg tokio_unstable -Dwarnings

  cross-test-with-parking_lot:
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-2204
    strategy:
      matrix:
        include:
          - target: i686-unknown-linux-gnu
            rustflags: --cfg tokio_taskdump
          - target: armv5te-unknown-linux-gnueabi
          - target: armv7-unknown-linux-gnueabihf
          - target: aarch64-unknown-linux-gnu
            rustflags: --cfg tokio_taskdump
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.rust_stable }}
          target: ${{ matrix.target }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - uses: useblacksmith/cache@v5
      - name: Tests run with all features (including parking_lot)
        run: |
          set -euxo pipefail
          cargo nextest run -p tokio --all-features --target ${{ matrix.target }}
          cargo test --doc -p tokio --all-features --target ${{ matrix.target }}
        env:
          RUST_TEST_THREADS: 1
          RUSTFLAGS: --cfg tokio_unstable -Dwarnings --cfg tokio_no_tuning_tests ${{ matrix.rustflags }}

  cross-test-without-parking_lot:
    needs: basics
    runs-on: blacksmith-4vcpu-ubuntu-22